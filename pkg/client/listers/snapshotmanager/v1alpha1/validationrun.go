/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cisco-sso/snapshot-manager/pkg/apis/snapshotmanager/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ValidationRunLister helps list ValidationRuns.
type ValidationRunLister interface {
	// List lists all ValidationRuns in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ValidationRun, err error)
	// ValidationRuns returns an object that can list and get ValidationRuns.
	ValidationRuns(namespace string) ValidationRunNamespaceLister
	ValidationRunListerExpansion
}

// validationRunLister implements the ValidationRunLister interface.
type validationRunLister struct {
	indexer cache.Indexer
}

// NewValidationRunLister returns a new ValidationRunLister.
func NewValidationRunLister(indexer cache.Indexer) ValidationRunLister {
	return &validationRunLister{indexer: indexer}
}

// List lists all ValidationRuns in the indexer.
func (s *validationRunLister) List(selector labels.Selector) (ret []*v1alpha1.ValidationRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ValidationRun))
	})
	return ret, err
}

// ValidationRuns returns an object that can list and get ValidationRuns.
func (s *validationRunLister) ValidationRuns(namespace string) ValidationRunNamespaceLister {
	return validationRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ValidationRunNamespaceLister helps list and get ValidationRuns.
type ValidationRunNamespaceLister interface {
	// List lists all ValidationRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ValidationRun, err error)
	// Get retrieves the ValidationRun from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ValidationRun, error)
	ValidationRunNamespaceListerExpansion
}

// validationRunNamespaceLister implements the ValidationRunNamespaceLister
// interface.
type validationRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ValidationRuns in the indexer for a given namespace.
func (s validationRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ValidationRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ValidationRun))
	})
	return ret, err
}

// Get retrieves the ValidationRun from the indexer for a given namespace and name.
func (s validationRunNamespaceLister) Get(name string) (*v1alpha1.ValidationRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("validationrun"), name)
	}
	return obj.(*v1alpha1.ValidationRun), nil
}
