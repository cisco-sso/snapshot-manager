/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/cisco-sso/snapshot-manager/pkg/apis/snapshotvalidator/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ValidationStrategyLister helps list ValidationStrategies.
type ValidationStrategyLister interface {
	// List lists all ValidationStrategies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ValidationStrategy, err error)
	// ValidationStrategies returns an object that can list and get ValidationStrategies.
	ValidationStrategies(namespace string) ValidationStrategyNamespaceLister
	ValidationStrategyListerExpansion
}

// validationStrategyLister implements the ValidationStrategyLister interface.
type validationStrategyLister struct {
	indexer cache.Indexer
}

// NewValidationStrategyLister returns a new ValidationStrategyLister.
func NewValidationStrategyLister(indexer cache.Indexer) ValidationStrategyLister {
	return &validationStrategyLister{indexer: indexer}
}

// List lists all ValidationStrategies in the indexer.
func (s *validationStrategyLister) List(selector labels.Selector) (ret []*v1alpha1.ValidationStrategy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ValidationStrategy))
	})
	return ret, err
}

// ValidationStrategies returns an object that can list and get ValidationStrategies.
func (s *validationStrategyLister) ValidationStrategies(namespace string) ValidationStrategyNamespaceLister {
	return validationStrategyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ValidationStrategyNamespaceLister helps list and get ValidationStrategies.
type ValidationStrategyNamespaceLister interface {
	// List lists all ValidationStrategies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ValidationStrategy, err error)
	// Get retrieves the ValidationStrategy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ValidationStrategy, error)
	ValidationStrategyNamespaceListerExpansion
}

// validationStrategyNamespaceLister implements the ValidationStrategyNamespaceLister
// interface.
type validationStrategyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ValidationStrategies in the indexer for a given namespace.
func (s validationStrategyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ValidationStrategy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ValidationStrategy))
	})
	return ret, err
}

// Get retrieves the ValidationStrategy from the indexer for a given namespace and name.
func (s validationStrategyNamespaceLister) Get(name string) (*v1alpha1.ValidationStrategy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("validationstrategy"), name)
	}
	return obj.(*v1alpha1.ValidationStrategy), nil
}
